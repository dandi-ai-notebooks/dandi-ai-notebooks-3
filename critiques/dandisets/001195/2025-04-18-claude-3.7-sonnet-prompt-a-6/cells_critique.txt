Cell 1
==========

OVERVIEW:
This cell provides an introduction to the notebook and the associated Dandiset (001195). It gives a brief overview of the research question addressed by the dataset (loneliness-like states in mice), details the types of data included (calcium imaging, behavioral videos, and electrophysiology recordings), and provides a link to the Dandiset on the DANDI Archive. It also outlines the goals of the notebook: connecting to the archive, listing assets, loading and exploring an electrophysiology NWB file, visualizing recordings, and examining stimulus-response relationships. Finally, it mentions the required packages. This cell is well-written and clear, providing a good starting point for the user.

IMAGE DESCRIPTIONS:
None

ISSUES:
None


Cell 2
==========

OVERVIEW:
This cell imports necessary Python packages for data handling, visualization, and interaction with DANDI and NWB files. It imports `numpy` for numerical operations, `matplotlib` and `seaborn` for plotting, and `pandas` for data manipulation. It also imports `DandiAPIClient` from `dandi` for interacting with the DANDI archive, `pynwb` for reading NWB files, `h5py` for working with HDF5 files, and `remfile` for remote file access. Finally, `ipywidgets` is imported for creating interactive widgets. The plotting style is set to "whitegrid" using `seaborn`.

IMAGE DESCRIPTIONS:
None

ISSUES:
None


Cell 3
==========

OVERVIEW:
This cell introduces the process of connecting to the DANDI archive. It states the intention to retrieve information about Dandiset 001195. This is a brief introductory sentence to set the stage for the following code cell.

IMAGE DESCRIPTIONS:
None

ISSUES:
None


Cell 4
==========

OVERVIEW:
This cell connects to the DANDI archive using the `DandiAPIClient` and retrieves metadata for Dandiset "001195". It then prints the Dandiset's name, ID, URL, contributors, keywords, and a truncated description. The code includes logic to handle different formats of the contributor field (list of strings or dictionaries) and filters out contributors containing specific terms like "Foundation," "Institute," or "Program." The URL is also explicitly defined in case it is not present in the metadata which makes the code robust. The description is truncated to 500 characters.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 5
==========

OVERVIEW:
This cell is another introductory cell. It indicates that the following cells will explore the assets (files) within the Dandiset. It mentions the presence of electrophysiology and calcium imaging data, providing context for the subsequent code.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 6
==========

OVERVIEW:
This cell retrieves a list of assets (files) from the Dandiset and prints the total number of assets found. It then displays the path and size (in MB) of the first 10 assets as a sample. The file sizes are formatted to two decimal places for readability.

IMAGE DESCRIPTIONS:
None

ISSUES:
None


Cell 7
==========

OVERVIEW:
This cell introduces the intention to analyze the distribution of file types and experiment types within the Dandiset. It serves as a prelude to the code that will perform this analysis.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 8
==========

OVERVIEW:
This cell extracts information from the asset paths to determine the subject ID and experiment type for each asset. It iterates through the list of assets, splitting the path to extract the subject ID. It determines the experiment type based on whether `_icephys.nwb`, `_ophys.nwb`, `.mp4`, or `.avi` are present in the filename. An 'Other' category is used as a catch-all. The extracted information is stored in a list of dictionaries, which is then converted to a Pandas DataFrame for easier analysis.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 9
==========

OVERVIEW:
This cell generates and displays a bar plot showing the distribution of experiment types in the Dandiset. It uses the `value_counts()` method on the 'exp_type' column of the `asset_df` DataFrame to count the occurrences of each experiment type. `seaborn.barplot` is used to create the plot, with experiment types on the x-axis and counts on the y-axis. The plot includes a title, y-axis label, rotated x-axis labels for better readability, and uses `plt.tight_layout()` before displaying the plot.

IMAGE DESCRIPTIONS:
The image is a bar plot showing the distribution of experiment types. The x-axis displays experiment types: "Intracellular Electrophysiology", "Behavior Video", and "Other". The y-axis displays the count for each experiment type. The count for "Intracellular Electrophysiology" is approximately 145, "Behavior Video" is approximately 40, and "Other" is also approximately 40. The title of the plot is "Distribution of Experiment Types in Dandiset 001195". The bars are a muted blue color, and the plot has a whitegrid background.

ISSUES:
None

Cell 10
==========

OVERVIEW:
This cell sets the stage for loading and exploring a specific NWB file from the Dandiset, focusing on intracellular electrophysiology data. It identifies the specific file to be used: "sub-235/sub-235_ses-20200921T131057_slice-slice-1_cell-C1_icephys.nwb". It also mentions that this file contains current clamp recordings.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 11
==========

OVERVIEW:
This cell loads a specific NWB file from the DANDI Archive using its asset ID. It constructs the URL for the NWB file using the provided `nwb_asset_id`. It then uses `remfile` to handle the remote file, `h5py` to open it as an HDF5 file, and `pynwb` to read the NWB file content into the `nwb` object.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 12
==========

OVERVIEW:
This is another introductory cell that explains that the following cell will examine the metadata stored within the loaded NWB file. This sets the context for the user and prepares them to interpret the upcoming output.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 13
==========

OVERVIEW:
This cell extracts and prints metadata from the loaded NWB file. It displays session information (description, start time, experimenter, lab, institution), subject information (ID, species, age, sex, strain, genotype, description), and electrophysiology-specific metadata (cell ID, slice ID, targeted layer, inferred layer) extracted from the `lab_meta_data` field. It provides a structured overview of the experimental context and animal characteristics associated with the data.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 14
==========

OVERVIEW:
This cell is another brief introduction to the following cells. It makes the reader aware that the subsequent cells will start exploring the electrophysiology recordings.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 15
==========

OVERVIEW:
This cell explores the contents of the `nwb` object, specifically the acquisition and stimulus data. It prints the available acquisition data (electrophysiological recordings) and stimulus data. For each, it lists the first 10 items (name, type, and description) and then indicates if there are more items beyond the displayed ones, to avoid overwhelming the output. The goal is to give the user an overview of the different recordings and stimulus protocols present in the NWB file.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 16
==========

OVERVIEW:
This cell sets the stage for visualizing current clamp recordings. The markdown describes the goal of visualizing the membrane potential changes in response to different current steps, preparing the user for the subsequent plotting.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 17
==========

OVERVIEW:
This cell defines a function `plot_current_clamp_response` to plot current clamp recordings and then calls that function to plot a specific recording. The function takes a `response_key` and `stimulus_key` as input, retrieves the corresponding data from the NWB file, applies any unit conversions, and generates a plot showing the membrane potential (response) and the injected current (stimulus) over time. The plot is a two-panel figure with the membrane potential on top and the stimulus current below, sharing the same x-axis (time). The stimulus current is converted to picoamperes (pA) for better visibility. The titles and axis labels are informative. Finally, the cell selects a specific `response_key` and `stimulus_key` ("current_clamp-response-20-ch-0" and "stimulus-20-ch-0") and calls the plotting function to display the recording. The plot is returned by the plotting function.

IMAGE DESCRIPTIONS:
The image consists of two subplots arranged vertically, sharing a common x-axis. The top subplot displays the membrane potential (V) over time (s), while the bottom subplot displays the injected current (pA) over time (s).
- **Top Subplot:** This plot shows the membrane potential in volts (V) on the y-axis and time in seconds (s) on the x-axis. The title of the plot is "Current Clamp Recording: current_clamp-response-20-ch-0." The membrane potential starts at approximately -0.06 V and then rises sharply with oscillations to around 0.04 V when the current is injected. It then settles to about -0.02V then returns around -0.06 V when the stimulus is removed.
- **Bottom Subplot:** This plot shows the injected current in picoamperes (pA) on the y-axis and time in seconds (s) on the x-axis. The title of the plot is "Stimulus: stimulus-20-ch-0." The injected current is approximately 240 pA between ~0.25s and ~1.25s and 0 otherwise. The stimulus is a square pulse.

ISSUES:
None

Cell 18
==========

OVERVIEW:
This cell introduces the plan to analyze responses to different current injection steps, setting up the user for an exploration of the neuron's firing properties and I-V relationship.

IMAGE DESCRIPTIONS:
None

ISSUES:
None


Cell 19
==========

OVERVIEW:
This cell analyzes and visualizes the neuron's responses to a series of current injection steps. It selects a subset of responses and stimuli (every 5 steps from -120pA to 260pA) for analysis. It then iterates through these selected responses and stimuli, retrieving the data, applying unit conversions, calculating a time vector, and plotting the membrane potential in response to each current injection step. The code handles both positive and negative current steps by taking the max or min of the stimulus data, respectively. Each response is plotted in a separate subplot within a single figure, with the title indicating the stimulus amplitude. The x-axis label ("Time (s)") is only shown for the bottom plot to avoid redundancy, and the y-axis is labeled "Vm (V)".

IMAGE DESCRIPTIONS:
The image displays six subplots arranged vertically, each showing the membrane potential (Vm) in volts (V) over time in seconds (s). Each subplot corresponds to the neuron's response to a different current injection step.

- **Subplot 1:** "Response to 40.0 pA current injection." There is a small upward deflection in the membrane potential followed by a return close to baseline. There are two action potentials visible. The stimulus duration is roughly 1s.

- **Subplot 2:** "Response to 140.0 pA current injection." Multiple action potentials are visible during the stimulus duration, which again is roughly 1s.

- **Subplot 3:** "Response to 240.0 pA current injection." Multiple action potentials are visible during the stimulus duration, roughly 1s.

- **Subplot 4:** "Response to 0.0 pA current injection." The time scale is longer here. This is presumably baseline data.

- **Subplot 5:** "Response to 0.0 pA current injection." Similar to plot 4.

- **Subplot 6:** "Response to 0.0 pA current injection." Similar to plots 4 and 5, with a longer timescale than the top three plots. The x-axis is labeled "Time (s)".

ISSUES:
The responses_to_analyze and stimuli_to_analyze keys are hardcoded as indexes from 10 to 40 in steps of 5, but it is apparent from the plot that the first 3 subplots have a different time scale from the second 3. It looks like the time scale changes after the third stimulus. Ideally the time windows would all be standardized. This isn't a major issue though.

Cell 20
==========

OVERVIEW:
This cell introduces the next step in the analysis: analyzing key properties of the neuron's responses, such as input resistance and firing rate. It serves as a transition to the more quantitative analysis that will follow.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 21
==========

OVERVIEW:
This cell defines a function `analyze_step_response` that extracts key properties from current clamp data. The function takes `response_key` and `stimulus_key` as input and retrieves corresponding data from the NWB file. It calculates the time vector, automatically detects the stimulus onset and offset based on the derivative of the stimulus signal, and determines the baseline, steady-state, and peak values of the membrane potential. It calculates input resistance only for hyperpolarizing steps and counts action potentials using a simple threshold crossing method for depolarizing steps. Finally, it calculates the firing rate based on the action potential count and step duration, and returns a dictionary containing these properties. The stimulus onset/offset detection here is much improved over the method in the previous cell.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 22
==========

OVERVIEW:
This cell applies the `analyze_step_response` function to a range of current clamp recordings and stores the results in a Pandas DataFrame. It first retrieves all the response and stimulus keys from the NWB file, ensuring they are sorted and paired correctly. To reduce computation time, it analyzes only every third response-stimulus pair. The analysis is wrapped in a `try...except` block to handle potential errors during the analysis, printing an error message if needed. Finally, the results are collected in the `all_responses` list and converted into a Pandas DataFrame called `response_df`.

IMAGE DESCRIPTIONS:
None

ISSUES:
The code throws a `IndexError: index 0 is out of bounds for axis 0 with size 0` error for many of the traces. It appears this comes from line 14 of the previous cell: `onset_idx = np.where(np.abs(stim_diff) > 1e-13)[0][0]`. It seems like in a lot of these traces, the line `np.where(np.abs(stim_diff) > 1e-13)` is returning an empty array, and then trying to access the first element `[0][0]` throws an error because the array is empty. This means the `stim_diff` is probably all zeros or very close to zero for many of the traces, so the stimulus onset is not able to be automatically detected. I'm not sure why this is the case.

Cell 23
==========

OVERVIEW:
This cell introduces the next step: visualizing the extracted response properties. It sets the context for the following plotting code.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 24
==========

OVERVIEW:
This cell generates a scatter plot of the current-voltage (I-V) relationship. It plots the 'step_amplitude_pa' (current injection in pA) on the x-axis and the 'delta_vm_v' (change in membrane potential in mV) on the y-axis. Membrane potential is converted from V to mV within the plot. The plot includes axis labels, a title, a grid, and horizontal and vertical dashed lines at zero.

IMAGE DESCRIPTIONS:
The image is a scatter plot showing the current-voltage relationship.
- The x-axis represents the "Current Injection (pA)" and ranges from approximately -120 to 250.
- The y-axis represents the "Membrane Potential Change (mV)" and ranges from approximately -30 to 50.
- There are 6 data points visible on the plot. From left to right, they are located at approximately: (-110, -27), (-60, -15), (60, 20), (120, 29), (180, 40), (240, 42).
- There is a vertical dashed gray line at x = 0 and a horizontal dashed gray line at y = 0.
- The title of the plot is "Current-Voltage Relationship".

ISSUES:
Given the errors in the previous cell, this plot only contains results from a small fraction of the total number of stimulus traces in the file (only every third trace was used, and even then many failed). It's hard to evaluate how representative this plot actually is or if the issues from the previous cell biased anything. Ideally, this plot should display an I-V relationship from all of the recordings.

Cell 25
==========

OVERVIEW:
This cell generates a scatter plot of the firing rate vs. current (f-I curve). It plots the 'step_amplitude_pa' (current injection in pA) on the x-axis and the 'firing_rate_hz' (firing rate in Hz) on the y-axis. The plot includes axis labels, a title, and a grid.

IMAGE DESCRIPTIONS:
The image is a scatter plot showing the relationship between firing rate and current injection.
- The x-axis shows the "Current Injection (pA)" and ranges from approximately -150 to 250.
- The y-axis shows the "Firing Rate (Hz)" and ranges from 0 to approximately 30.
- There are 6 data points displayed: roughly (-110, 0), (-60, 0), (60, 8), (120, 20), (180, 27), and (240, 27).
- The title of the plot is "Firing Rate vs. Current (F-I Curve)".

ISSUES:
As with the previous plot, there were a lot of errors in the `analyze_step_response` function, so the accuracy and representation of this plot is questionable. The failure of the automatic stimulus onset detection is a big limitation that needs to be fixed for this analysis to be reliable.

Cell 26
==========

OVERVIEW:
This cell introduces the next analysis step: a detailed examination of the shape and properties of individual action potentials.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 27
==========



Cell 28
==========

OVERVIEW:
This cell aims to extract and visualize action potentials from a selected current clamp recording. It defines a function `extract_action_potentials` to identify action potentials based on a threshold crossing and extract a time window around each detected AP. It then selects a recording with a moderate firing rate from the previously analyzed data (using the `response_df` DataFrame). If such a recording is found, the code extracts the action potentials using the defined function and generates three plots: a plot of the full recording with vertical lines marking the detected AP locations, a plot of a single example action potential, aligned according to its time in the original recording, and a plot of multiple action potentials aligned to their threshold crossing time. The time axis is centered so that t=0 corresponds to the threshold crossing.

IMAGE DESCRIPTIONS:
**First Image:**

- **Top Subplot:** This plot shows the full membrane potential recording in mV vs. time in seconds. The x-axis ranges from approximately 0 to 5 seconds, and the y-axis ranges from approximately -70 mV to 50 mV. Vertical dashed red lines mark the approximate locations of action potentials, primarily concentrated between 0 and 1 second. The title is "Full Recording with APs Marked: current_clamp-response-17-ch-0".
- **Bottom Subplot:** This plot shows an example action potential's shape. The membrane potential in mV is plotted against time in seconds. The x-axis ranges from approximately 0.187 to 0.197 s and the y-axis ranges from approximately -50 to 40 mV. The title is "Example Action Potential".

**Second Image:**
This plot shows five action potentials aligned to their threshold crossing time. The membrane potential in mV is plotted against time in ms. The y-axis ranges from approximately -45 to 40 mV, and the x-axis ranges from approximately -5 to 5 ms. The five action potentials are plotted in different colors and labeled AP #1 to AP #5 in the legend.

ISSUES:
The approach to AP detection uses a fixed threshold and looks for upward crossings. In the presence of noise, it may be fooled, but appears adequate here. Because of the problems with automatic stimulus detection arising from small `stim_diff` values in prior cells, there also might be issues with properly detected APs. This doesn't appear to be the case in the data that was analyzed. Also, once an AP is detected, the code looks within a fixed window around the threshold crossing to extract it: this might chop off the AP if the window isn't quite big enough.

Cell 29
==========

OVERVIEW:
This cell provides a summary of the notebook's content and key findings, as well as suggestions for future directions. It reiterates the context of the Dandiset (dorsal raphe dopamine projections and loneliness-like states) and summarizes the observations from the analysis, including the recording location (CeA), mouse line (DAT::Cre), I-V relationship, F-I curve, and action potential shape. It suggests future analyses, such as comparing different neuronal populations, integrating calcium imaging data, correlating neuronal properties with behavior, and conducting detailed analyses of spike timing patterns and adaptation properties.

IMAGE DESCRIPTIONS:
None

ISSUES:
None


Cell 1
==========

OVERVIEW:
This cell provides a title for the notebook, indicating the Dandiset being explored (001333) and a brief description of the dataset as the Parkinson's Electrophysiological Signal Dataset (PESD). It sets the stage for the rest of the notebook.

IMAGE DESCRIPTIONS:
None

ISSUES:
None


Cell 2
==========

OVERVIEW:
This cell provides a disclaimer that the notebook was AI-generated and may contain unverified information. It advises the reader to be cautious and independently verify findings. This is important for transparency and responsible use of the notebook's content.

IMAGE DESCRIPTIONS:
None

ISSUES:
None


Cell 3
==========

OVERVIEW:
This cell introduces a section providing a general overview of the notebook's contents and purpose.

IMAGE DESCRIPTIONS:
None

ISSUES:
None


Cell 4
==========

OVERVIEW:
This cell provides a more detailed overview of the PESD dataset. It mentions the availability of the dataset on the DANDI Archive and provides a link to view it on neurosift.app. It also describes the two types of signals in the dataset (Beta ARV and STN LFP) and explains the expected characteristics of the parkinsonian signals (high beta power). This cell gives context to the following notebook cells.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 5
==========

OVERVIEW:
This cell serves as an introduction to the section where the necessary Python packages will be imported.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 6
==========

OVERVIEW:
This cell imports the required Python libraries for data analysis and visualization. `pynwb` and `h5py` are used for reading NWB files (the format of the data in the Dandiset), `remfile` for accessing remote files, `numpy` for numerical operations, `pandas` for data manipulation, `matplotlib` and `seaborn` for plotting. It also imports `DandiAPIClient` from `dandi` to interact with the DANDI Archive. Finally, it configures the plotting environment using `seaborn` and sets a default figure size for matplotlib.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 7
==========

OVERVIEW:
This cell introduces the section where the Dandiset will be loaded and prepared for analysis.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 8
==========

OVERVIEW:
This cell explains the purpose of the following cell - connecting to the DANDI archive and retrieving information about the specified Dandiset.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 9
==========

OVERVIEW:
This cell connects to the DANDI archive using `DandiAPIClient`, retrieves the Dandiset with ID "001333", and extracts its metadata. It then prints the Dandiset ID, name, and a truncated version of the description. This confirms that the connection to the DANDI archive is successful and that the Dandiset has been loaded correctly.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 10
==========

OVERVIEW:
This cell describes the purpose of the following cell which is to retrieve the list of files (assets) present in the Dandiset.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 11
==========

OVERVIEW:
This cell retrieves a list of assets (files) from the Dandiset using `dandiset.get_assets()`. Then, it prints the total number of assets found and displays the paths of the first five assets in the list. This gives an overview of the files available in the Dandiset and their organization.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 12
==========

OVERVIEW:
This cell introduces the purpose of the next cells: to analyze the file types present in the Dandiset.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 13
==========

OVERVIEW:
This cell analyzes the asset paths to extract information about the dataset's structure. It identifies subject categories based on the `sub-` prefixes in the file paths using regular expressions. It then counts the number of assets belonging to each subject category and prints a summary, sorted by the number of assets per category. Finally, it determines and prints the file extensions present in the dataset. The output indicates that the dataset includes "healthy" and "parkinson" subjects with "beta" and "lfp" data, and that all files have the "nwb" extension.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 14
==========

OVERVIEW:
This cell introduces the section where the notebook will now load and explore the contents of a single NWB file from the Dandiset.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 15
==========

OVERVIEW:
This cell describes the upcoming steps: selecting an NWB file for detailed exploration and defining the functions required to load it from a remote URL.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 16
==========

OVERVIEW:
This cell defines a function `load_nwb_from_url` that takes a URL as input and loads an NWB file from that URL. It uses `remfile` to handle the remote file, `h5py` to open the HDF5 file, and `pynwb` to read the NWB data. The function returns both the loaded NWB object and the open h5py file object. This is important as the h5_file object needs to be explicitly closed after use, to avoid memory leaks due to remfile not automatically closing the underlying http connection (as per https://github.com/flatironinstitute/remfile/issues/38).

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 17
==========

OVERVIEW:
This cell describes the next step: selecting and loading one of the NWB files belonging to 'healthy-simulated-beta' subject category.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 18
==========

OVERVIEW:
This cell iterates through the list of assets to find one whose path contains 'sub-healthy-simulated-beta‚Äù. It then prints the selected asset's path and its content URL, which is obtained using `asset.get_content_url()`. Finally, it calls the `load_nwb_from_url` function to load the NWB file from the retrieved URL. It also includes a check to print "No suitable asset found" if it can't locate a matching NWB file.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 19
==========

OVERVIEW:
This cell introduces the intention of exploring the basic metadata of the loaded NWB file in the subsequent cell.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 20
==========

OVERVIEW:
This cell accesses and prints various metadata attributes from the loaded NWB file (`nwb`). This includes session description, session start time, lab, institution, experiment description (truncated), keywords, and subject information such as subject ID, species, sex, age, and description. The information printed gives a basic context about the NWB file and the simulated data.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 21
==========

OVERVIEW:
This cell introduces a section dedicated to exploring the Local Field Potential (LFP) data within the loaded NWB file.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 22
==========

OVERVIEW:
This cell clarifies the focus of the following cells: to check for the presence of Local Field Potential (LFP) data in the loaded NWB file, as indicated in the dataset description.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 23
==========

OVERVIEW:
This cell iterates through the processing modules in the NWB file and prints their names and descriptions. For each module, it iterates through the data interfaces and prints their names and types. If an interface is an LFP interface (determined by checking if it an instance of `pynwb.ecephys.LFP`), it lists the available electrical series within that interface, along with their shapes and units. This allows verification of the presence of LFP data as suggested by the description and gives information about the data structure.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 24
==========

OVERVIEW:
This cell introduces the purpose of the next cell: to examine the electrode information available within the NWB file in order to gain insights into the recording setup of the experiment.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 25
==========

OVERVIEW:
This code cell first checks if the NWB file has electrode information (`nwb.electrodes`). If the information exists, it converts the electrode table to a Pandas DataFrame using `nwb.electrodes.to_dataframe()`, prints the number of electrodes, and displays the first few rows of the DataFrame using the `display` function. This allows the user to inspect the electrode metadata. It also prints the unique electrode locations and the count of electrodes at each location, as well as the different electrode groups and the number of electrodes in each group. The `display` function is used to view the Pandas DataFrame as a table. If the NWB file doesn't contain the electrode table the cell prints "No electrode information available".

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 26
==========

OVERVIEW:
This cell introduces the final section where the Beta Band LFP data will be visualized.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 27
==========

OVERVIEW:
This cell specifies the objective of the following cell: extracting and visualizing the Beta Band Voltage data from the LFP electrical series.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 28
==========

OVERVIEW:
This cell extracts the "Beta_Band_Voltage" data and corresponding timestamps from the LFP electrical series within the NWB file. It prints the shapes of the data and timestamps arrays, as well as the duration of the recording which is calculated from the timestamps. Moreover, it computes and prints basic statistics (min, max, mean, and standard deviation) of the extracted LFP data, including the unit of the data which is volts. This provides an initial numerical characterization of the LFP signal.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 29
==========

OVERVIEW:
This cell introduces the purpose of the subsequent cell, which will visualize the extracted LFP data over time.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 30
==========

OVERVIEW:
This cell generates a plot of the Beta Band Voltage data over time. It sets the figure size, plots the timestamps against the corresponding LFP data, adds a title ("LFP Beta Band Voltage Time Series"), labels the x-axis as "Time (seconds)", and the y-axis as "Voltage (volts)", using the extracted units from the NWB file. The plot also includes a grid for better readability. The `plt.show()` command displays the generated plot.

IMAGE DESCRIPTIONS:
The plot shows the LFP Beta Band Voltage Time Series. The x-axis represents Time in seconds, ranging approximately from 10 to 37. The y-axis represents Voltage in volts, ranging from approximately 0 to 0.00014. The plot displays a fluctuating signal with irregular peaks and troughs.

ISSUES:
The time axis starts from around 10 seconds. This is likely due to the timestamps not starting from zero. The plot may have looked better if the initial time was subtracted from all timestamps to start the x-axis from zero.

Cell 31
==========

OVERVIEW:
This cell introduces a frequency domain analysis of the signal using the Fourier transform, in order to check for the presence of beta oscillations (13-30 Hz).

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 32
==========

OVERVIEW:
This cell calculates and plots the frequency spectrum of the LFP data using a Fast Fourier Transform (FFT).
First, the sampling frequency (`fs`) is calculated based on the timestamps. Then, the frequencies (`freqs`) and FFT values (`fft_vals`) are computed using `np.fft.rfftfreq` and `np.fft.rfft`, respectively.
The resulting frequency spectrum is plotted using a semilogarithmic scale for the y-axis (amplitude). The x-axis represents the frequency in Hz. The plot includes a title, axis labels, and a grid.
The beta band (13-30 Hz) is highlighted with a red shaded region to visually emphasize this frequency range. The text "Beta Band (13-30 Hz)" is added to the plot to label the highlighted region.

IMAGE DESCRIPTIONS:
The plot shows the frequency spectrum of the Beta Band Voltage data on a semi-logarithmic scale. The x-axis represents Frequency in Hz, ranging from 0 to 30. The y-axis represents the Amplitude on a logarithmic scale. A red shaded region highlights the beta band (13-30 Hz), which is labelled with the text "Beta Band (13-30 Hz)". The plot shows a peak close to 0 Hz followed by a decline of the spectral power, with a small, almost unnoticeable bump within the beta band.

ISSUES:
None

Cell 33
==========

OVERVIEW:
This cell introduces the intention of visualizing the temporal changes to the signal's frequency content through the usage of a spectrogram.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 34
==========

OVERVIEW:
This cell creates a spectrogram of the LFP data using `plt.specgram`. It sets the sampling frequency (`Fs`) and colormap (`cmap`). The spectrogram displays the power spectral density of the signal over time, with the x-axis representing time (seconds) and the y-axis representing frequency (Hz). A colorbar is added to indicate the power/frequency in dB/Hz. Horizontal dashed red lines are added at 13 Hz and 30 Hz to highlight the boundaries of the beta band, and "Beta Band" text is added next to the lines. The frequency range of the spectrogram is limited to 0-50 Hz using `plt.ylim(0, 50)` to emphasize the lower frequencies.

IMAGE DESCRIPTIONS:
The spectrogram displays the time evolution of the frequency content of the signal. The x-axis is "Time (seconds)" ranging from approximately 1 to 25. The y-axis is "Frequency (Hz)" ranging from 0 to 50. The colorbar on the right indicates "Power/Frequency (dB/Hz)". Two horizontal dashed red lines mark the lower (13 Hz) and upper (30 Hz) bounds of the beta band, which is also labeled with the text "Beta Band". The area below 13 Hz exhibits yellow/greenish colours, which translate to higher power/frequency values, while the area between 13 Hz and 30 Hz exhibits mostly blue/purple colours, corresponding to lower values.

ISSUES:
The time axis of the spectrogram plot starts from an arbitrary point. Subtraction of the first timestamp from all other timestamps might assist in the interpretability of the spectrogram plot. Also, the timestamps do not align between the time series plot (previous cell) and the spectrogram plot. This may be because the `specgram` function uses its own sliding window approach which might be incompatible with the raw timestamps provided. This inconsistency should be investigated.

Cell 35
==========

OVERVIEW:
This cell introduces a section for further analysis focused on Beta Band activity within this dataset.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 36
==========

OVERVIEW:
This cell explains the planned approach for the following cells to quantify the signal's Beta Band activity by filtering and band-power calculations.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 37
==========

OVERVIEW:
This cell defines a function `band_power` that calculates the average power of a signal within a specified frequency band (low to high). The function takes the signal data, sampling frequency (`fs`), lower frequency bound (`low`), upper frequency bound (`high`), and window type (`window`) as inputs.
Inside the function, windowing is applied to the data (default is Hanning window). The FFT is calculated and its magnitude is taken. The frequency indices corresponding to the specified frequency band are determined. Finally, the average power within the frequency band is calculated as the mean of the squared FFT values within those indices. The function returns the band power along with the full FFT data, and frequency axis.
Then the `band_power` function is called to calculate the beta band power (13-30 Hz) of the LFP data. Also calculated are the powers for Theta, Alpha and low Gamma bands. The calculated beta band power is then printed in scientific notation.

IMAGE DESCRIPTIONS:
None

ISSUES:
The gamma band extends higher than 50 Hz, and should be appropriately accounted for in the plot. The frequency resolution of the spectrogram is limited, so the precise band power cannot be accurately determined. It would be helpful to determine whether the beta power should be higher than the alpha power. Also, no units for the calculated band powers were included. The averaging of the `fft_data**2` from `low_idx` to `high_idx` is not energy-preserving, as it doesn't account for the frequency resolution of the transform (i.e. does not correctly normalize the band power by the bandwidth). A better estimate can be obtained estimating the power spectral density (PSD), and then simply integrating (summing) the PSD within the bandwidth of interest.

Cell 38
==========

OVERVIEW:
This cell introduces the purpose of the following cells, which is to do a comparison of the previously calculated band powers.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 39
==========

OVERVIEW:
This cell creates a bar chart to compare the power in different frequency bands. It defines a list of frequency bands (`bands`) and a corresponding list of band powers (`powers`) calculated in the previous cell. A bar chart is generated using `plt.bar`, with the frequency bands on the x-axis and the powers on the y-axis. The plot includes a title, axis labels, and a grid. The y-axis is set to a logarithmic scale to better visualize the differences in power between the bands.

IMAGE DESCRIPTIONS:
The bar chart compares the power in four different frequency bands: Theta (4-8 Hz), Alpha (8-13 Hz), Beta (13-30 Hz), and Low Gamma (30-50 Hz). The x-axis represents the frequency bands, and the y-axis represents the Power on a logarithmic scale. The Low Gamma band has the highest power, followed by the Theta band, the Alpha band, and the Beta band, which has the lowest power.

ISSUES:
The y-axis should include units, based on the units from the input data.
It might be useful to add a text annotation on the bar tops with the actual power values, so the user doesn't have to read them from the y-axis.
The powers do not match the PSD in the earlier plot, which is due to the issues brought up in the earlier cell.

Cell 40
==========

OVERVIEW:
This cell introduces the next analysis step: examining temporal changes in the Beta Band power using a sliding window approach.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 41
==========

OVERVIEW:
This cell calculates and visualizes the band power in a sliding window along the signal. It defines a function `sliding_band_power` which takes the data, timestamps, sampling frequency, low and high frequency boundaries, window size, and step size as input. It calculates the band power for each window by calling the previously defined `band_power` function. The average timestamp within the window is assigned as the time for that window.
The function returns arrays of times and corresponding band powers. Using this function, the beta band (13-30 Hz) and theta band (4-8 Hz) powers are computed using a window size of 1 second and a step size of 0.5 seconds. These sliding band powers are then plotted against time, with the y-axis on a logarithmic scale. The plot includes a title, axis labels, a grid, and a legend to distinguish the beta and theta bands.

IMAGE DESCRIPTIONS:
The plot visualizes the power of beta (13-30 Hz) and theta (4-8 Hz) bands across time, using a sliding window approach, with powers rendered on a logarithmic scale. The x-axis is "Time (seconds)" with values ranging from 10 to 37. The y-axis is "Band Power (log scale)". Both the beta and theta bands exhibit noticeable fluctuations across time. The theta band is consistently higher in power than the beta band.

ISSUES:
Same time alignment issues apply here as previously mentioned with the time series and spectrogram plots. The units are unspecified on the y-axis. Also, the same caveats from the single-window bandpower calculations apply here as well. Lastly, it would be helpful to include additional statistics, e.g. the *ratio* of beta/theta power, since that's what's typically considered to be a biomarker for parkinsonian activity.

Cell 42
==========

OVERVIEW:
This cell introduces a section focusing on the comparison of multiple sessions within the Dandiset, enabling a comprehensive analysis across different data recordings.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 43
==========

OVERVIEW:
This cell describes the intention of loading a separate NWB file (representing a different session) for a comparative analysis of the signal's Beta Band activity.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 44
==========

OVERVIEW:
This cell aims to compare beta band activity across two different sessions. It searches for a second NWB file from the "sub-healthy-simulated-beta" subject type, but different from the previously loaded one. Once found, it loads the second NWB file, extracts the LFP data, and calculates basic statistics (min, max, mean) for both sessions to assess overall signal characteristics. Also, the beta band power for both sessions is computed and, finally, the percent difference between the beta power of the two sessions is calculated and printed. This comparison could highlight potential differences in the data across different recording sessions of the same subject.

IMAGE DESCRIPTIONS:
None

ISSUES:
The mean, min, and max values are similar between the two sessions, and the Beta powers have have 0% difference. This suggests that both the sessions are identical. This means the analysis is ineffective, because two virtually identical sessions were compared. A different asset needs to be selected to ensure that a meaningful comparison can be made. Also, the sampling frequency from the first session is reused in the second session, but this may not be valid. The frequency needs to be computed for the second session as well. Finally, the plot may also benefit from the caveats previously mentioned, such as ensuring that the band calculation is energy preserving.

After the second NWB file has been loaded, the associated h5_file should be explicitly closed, as done with the first file. If the h5_file objects are not explicitly closed, this might cause problems when processing many files.

Cell 45
==========

OVERVIEW:
This cell introduces the final task: graphically representing the comparative analysis of signal properties across the two sessions studied above.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 46
==========

OVERVIEW:
This cell generates three sets of comparative plots to visualize the differences between the two NWB files corresponding to each session, if a second asset was successfully loaded.

The first plot shows both time series on a single figure, two subplots showing the raw voltage versus time trace for the first, and second sessions;
The second plot shows the frequency spectra. This has also been rendered as a 2x1 plot showing the frequency domain information for the first, and then second session.
The third plot compares the sliding window beta band power for both sessions on the same plot.

IMAGE DESCRIPTIONS:
The first figure is a vertically stacked comparison of two time series:
- The top subplot is titled "Session 1", x-axis is "Time (seconds)" ranging from ~10 to ~37, and y axis "Voltage (V)", and shows the waveform of LFP data from Session 1, with values from ~0 to 0.00014
- The bottom subplot is titled "Session 2", has the same axes as the top, and shows the waveform of LFP data from Session 2, with more or less same shape and range as session 1.

The second figure shows the frequency spectra of both session in the frequency domain:
- The top subplot shows the FFT for session 1 and is titled "Frequency Domain - Session 1". It plots "Frequency (Hz)" on the x-axis and "Amplitude" on the y-axis (log scale). The beta band (13-30 Hz) is marked by a red shaded region.
- The bottom subplot shows the FFT for session 2 and is titled "Frequency Domain - Session 2". The axes and scaling are same as the top subplot. Again the beta band (13-30 Hz) is highlighted.

The third figure plots shows and compares the sliding window beta power of sessions 1 and 2 in a shared plot.
-  The x-axis is "Time (seconds)" ranging from ~10 to ~37, and the y-axis is "Beta Band Power (13-30 Hz)" on a logarithmic scale. Both Session 1, and Session 2 fluctuate close to one another across the complete time axis, confirming that this plot does not provide any new information compared to the session 1 vs session 2 comparison of of Beta power calculated above.

ISSUES:
As the two sessions are indistinguishable, the visual comparison is not very insightful due to little or no variability introduced by this choice of sessions.

The issues with time alignment, unit specification, and the energy-preserving bandpower calculation also apply here.

Also, the h5py file object of second_nwb must be explicitly closed after using it, using second_h5_file.close(). If this is not done, the remfile may not close underlying connections which might exhaust memory.

Cell 47
==========

OVERVIEW:
This cell introduces the final section of the notebook, dedicated to summarizing the findings and drawing conclusions based on the performed analyses.

IMAGE DESCRIPTIONS:
None

ISSUES:
None

Cell 48
==========

OVERVIEW:
This cell summarizes the explorations done through the notebook. It touches upon the key findings from the analysis of data. It also provides a list of future directions that can be undertaken based on the data presented in the Dandiset.

IMAGE DESCRIPTIONS:
None

ISSUES:
The fourth key finding is problematic because the two sessions are identical, and this was not intentional when the notebook was designed. Because the two sessions were too similar, there was little to no meaningful analysis that could be done. Furthermore, it means that whatever conclusions that have been drawn from the similar signals must be taken with a grain of salt. Also, the lower frequencies do not always have higher power, and the plot earlier shows that the low gamma band has a greater power magnitude compared to the theta and alpha bands.


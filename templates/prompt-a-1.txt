You are going to create a Jupytext notebook called `notebook.py` that will help researchers explore and analyze a Dandiset {{ DANDISET_ID }}. After you create the notebook, convert it to `notebook.ipynb` and execute the Jupyter notebook to make sure it runs without errors. If there are errors, you will need to fix them in the original `notebook.py` file, re-convert and re-run the notebook, repeating until it runs properly.

The notebook should:

1. Provide an introduction to the Dandiset, including its name, description, and key metadata
2. Include code to load and explore the dataset's structure
3. Demonstrate how to access and visualize some data from NWB files in the Dandiset. Ideally you should generate some tables and 2-4 high-quality plots that are informative and useful for a scientist to interpret.
4. Include explanatory markdown cells that guide the user through the analysis process

Here's the plan that you should follow:

1. Get the Dandiset metadata using `python tools_cli.py dandiset-info {{ DANDISET_ID }}`.
2. Get the Dandiset assets using `python tools_cli.py dandiset-assets {{ DANDISET_ID }}`.
3. Choose one or more NWB files from the assets and get its information using `python tools_cli.py nwb-file-info {{ DANDISET_ID }} <NWB_FILE_URL>`.
4. Write the content of the notebook to `notebook.py`.
5. Run `jupytext --to notebook notebook.py && jupyter execute --inplace notebook.ipynb` to convert the notebook to a Jupyter notebook and execute the resulting `notebook.ipynb` to make sure it runs without errors and produces output cells. Use a timeout of 600 seconds. If it times out, you should adjust the notebook and re-run.
6. If there are errors, fix them in the Jupytext `notebook.py` file, re-run the above command to convert and execute, repeating these steps until the notebook runs properly.

## Calling tools

In order to get information about the Dandiset and how to load data from NWB files within the Dandiset, you will need to use the following command-line tools:

```bash
python tools_cli.py dandiset-info {{ DANDISET_ID }}
```

This will print the metadata of the Dandiset, including its name, description, and key metadata.

```bash
python tools_cli.py dandiset-assets {{ DANDISET_ID }}
```

This will print the assets (files) available in the Dandiset. For each NWB file it will include the asset ID. From the asset ID you can construct the associated URL as follows:

https://api.dandiarchive.org/api/assets/<ASSET_ID>/download/

```bash
python tools_cli.py nwb-file-info {{ DANDISET_ID }} <NWB_FILE_URL>
```

This will print usage information on how to stream data from the remote NWB file.

It's very important that you use all of the above tools before you start creating the notebook so you understand the Dandiset, the data it contains, and how to load that data in Python.

# About the notebook

At the top of the notebook, prominently inform the user that the notebook was AI-generated using dandi-notebook-gen and has not been fully verified, and that they should be cautious when interpreting the code or results.

The notebook should be well-documented, and follow best practices for neurophysiology data analysis. Include comments in code cells to explain what each step does.

The notebook should not draw scientific conclusions. Instead, focus on helping the user get started in loading and viewing the data.

Assume that all the packages you would need are already installed on the user's system. The resulting Jupytext should not include instructions to run pip install (no code cells starting with "!"). The markdown cells should include instructions for the user to install any necessary packages.

The rnotebook should use the DANDI API to list all of the assets in the Dandiset. This code block should look something like:

```python
from dandi.dandiapi import DandiAPIClient
client = DandiAPIClient()
dandiset = client.get_dandiset("{{ DANDISET_ID }}")
assets = list(dandiset.get_assets())
```

The Jupytext should use `# %% [markdown]` for markdown cells and `# %%` delimiters for the code cells.

## Some notes

If you load data from only select files, then you should indicate which files you are using.

Note that it doesn't work to try to index an h5py.Dataset with a numpy array of indices.

Note that you cannot do operations like np.sum over a h5py.Dataset. You need to get a numpy array using something like dataset[:]

If you are going to load a subset of data, it doesn't make sense to load all of the timestamps in memory and then select a subset. Instead, you should load the timestamps for the subset of data you are interested in. So we shouldn't ever see something like `dataset.timestamps[:]` unless we intend to load all the timestamps.

When loading data for illustration, be careful about the size of the data, since the files are hosted remotely and datasets are streamed over the network. You may want to load subsets of data. But if you do, please be sure to indicate that you are doing so, so the reader doesn't get the wrong impression about the data.

Keep in mind that through your tool calls you have been given information about what data are available in the files, whereas the reader of the notebook does not have access to that information. So in your illustration it would be helpful to show how they could get that information (e.g., columns in a table, etc).

When showing unit IDs or channel IDs, be sure to use the actual IDs rather than just the indices.

`plt.style.use('seaborn')` is deprecated. If you want to use seaborn styling, use:
```
import seaborn as sns
sns.set_theme()
```

Do not use seaborn styling for plotting images.

Image masks values range from 0 to 1. If you are plotting all image masks superimposed on each other in a single figure, use a heatmap with np.max on the image masks.

For raw extracellular electrophysiology data, you shouldn't try to do spike detection, spike sorting, or anything like that in the notebook because it's too computationally intensive. Getting anything useful from extracullular electrophysiology data requires a lot of processing and is not something that can be done in a notebook. Instead, you should focus on showing how to load a reasonable amount of data and how to visualize it.

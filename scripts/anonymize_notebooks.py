#!/usr/bin/env python3
"""
This script creates anonymized copies of Jupyter notebooks for review purposes.

Purpose:
--------
When reviewing notebooks generated by different AI models, we want to avoid bias
by hiding which model generated each notebook. This script creates a parallel
directory structure where the model/prompt information in folder names is replaced
with SHA1 hashes.

Operation:
---------
1. Creates a for-review/ folder if it doesn't exist
2. For each dandiset in dandisets/ID:
   - Creates corresponding for-review/dandisets/ID directory
   - For each notebook of the form dandisets/ID/name-of-subfolder/ID.ipynb:
     * Creates for-review/dandisets/ID/sha1-of-name-of-subfolder/ID.ipynb
     * Where sha1-of-name-of-subfolder is the SHA1 hash of the original subfolder name

This ensures reviewers can evaluate notebooks without knowing which model generated them,
as the subfolder names (containing model/prompt information) are replaced with their
SHA1 hashes.
"""

import os
import shutil
import hashlib
from pathlib import Path

def create_for_review_structure():
    """Create the base for-review directory structure if it doesn't exist."""
    review_dir = Path("for-review")
    dandisets_dir = review_dir / "dandisets"
    dandisets_dir.mkdir(parents=True, exist_ok=True)
    return review_dir

def hash_subfolder_name(subfolder):
    """Create SHA1 hash of subfolder name."""
    return hashlib.sha1(subfolder.encode()).hexdigest()

def process_dandiset(dandiset_id):
    """Process notebooks for a single dandiset."""
    source_dir = Path("dandisets") / dandiset_id
    target_dir = Path("for-review/dandisets") / dandiset_id
    target_dir.mkdir(parents=True, exist_ok=True)

    # Find all notebooks in the dandiset directory
    for notebook_path in source_dir.glob("**/*.ipynb"):
        try:
            # Get the subfolder name (parent directory of the notebook)
            subfolder = notebook_path.parent.name

            # Skip if parent directory is the dandiset root
            if subfolder == dandiset_id:
                continue

            # Create hashed subfolder name
            hashed_subfolder = hash_subfolder_name(subfolder)

            # Create target directory with hashed name
            target_subfolder = target_dir / hashed_subfolder
            target_subfolder.mkdir(exist_ok=True)

            # Copy notebook to the target directory
            target_notebook = target_subfolder / notebook_path.name
            shutil.copy2(notebook_path, target_notebook)
            print(f"Copied {notebook_path} -> {target_notebook}")

        except Exception as e:
            print(f"Error processing {notebook_path}: {str(e)}")

def main():
    """Main execution function."""
    # Create base directory structure
    review_dir = create_for_review_structure()
    print(f"Created review directory structure at {review_dir}")

    # Process each dandiset
    dandisets_dir = Path("dandisets")
    if not dandisets_dir.exists():
        print("Error: dandisets directory not found")
        return

    for dandiset_path in dandisets_dir.iterdir():
        if dandiset_path.is_dir() and not dandiset_path.name.startswith('.'):
            print(f"\nProcessing dandiset {dandiset_path.name}")
            process_dandiset(dandiset_path.name)

if __name__ == "__main__":
    main()
